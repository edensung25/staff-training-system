{"ast":null,"code":"import _toConsumableArray from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cai/Work_project/staff-training-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cai/Work_project/staff-training-system/client/src/App.js\";\n// import React from 'react';\n// import './App.css';\n// import HomeLayout from './HomeLayout'; //'.js' can be omitted.\n// import QuestionSet from './QuestionSet';\n// import ChapterContent from './ChapterContent';\n// import ChapterList from './ChapterList';\n// import ManagerPage from './ManagerPage';\n// import { Button, notification, Form } from 'antd';\n// import Login from './Login';\n//\n// const WrappedLogin = Form.create({ name: 'normal_login' })(Login);\n//\n//\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       // chapterListPage, chapterContentPage, testPage, loginPage, managerPage\n//       currentPage: 'loginPage',\n//       showScore: false,\n//       chapterId: 0,\n//       currentTest: null,\n//       user: {\n//         admin: true,\n//         username: 'abc',\n//         password: '1234',\n//         scores: [[null, null], [null, null]],\n//         bookmarks: [2, 0] // 1 means page #1\n//       },\n//       chapters: [\n//         {\n//           id: 0,\n//           title: 'c1',\n//           content: ['1111-1','1111-2'],\n//           questionSets:[\n//             [{ // [ [{},{},{}] , [{},{},{}]] ,\n//               statement: 'ch1-qs1-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }, {\n//               statement: 'ch1-qs1-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }, {\n//               statement: 'ch1-qs1-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }],\n//             [{\n//               statement: 'ch1-qs2-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs2-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'B',\n//             }, {\n//               statement: 'ch1-qs2-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }]]},\n//         {\n//           id: 1,\n//           title: 'c2',\n//           content: ['2222-1','2222-2'],\n//           questionSets:[\n//             [{ // [ [{},{},{}] , [{},{},{}]] ,\n//               statement: 'ch1-qs1-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }, {\n//               statement: 'ch1-qs1-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs1-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'B',\n//             }],\n//             [{\n//               statement: 'ch1-qs2-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs2-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }, {\n//               statement: 'ch1-qs2-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }]]}\n//       ],\n//     }\n//   }\n//\n//\n//   onClickOfMenu = (e) => this.setState({currentPage: e.key});\n//   // chapterListPage, chapterContentPage, testPage, loginPage, managerPage...\n//\n//   onClickOfHome = () => this.setState({currentPage: 'chapterListPage'})\n//\n//   onSelectChapter = (i, e) => { // logic of using bind()!\n//     this.setState({currentPage: e.target.value, chapterId: i}); // just to demo the usage of e and bind().\n//     console.log(this.state.currentPage, this.state.chapterId);\n//   }\n//\n//   onSelectTest = (i) => { // logic of using bind()!\n//     const questionSetIndex = this.state.user.scores[i].findIndex((s,i,l) => l[i]===null);\n//     // if tried all the tests, reset the scores:\n//     if (questionSetIndex === -1) {\n//       this.openNotification(i);\n//     }\n//     else {\n//       this.setState({currentPage: 'testPage', chapterId: i, currentTest: questionSetIndex});\n//     }\n//     console.log(this.state.currentPage, this.state.chapterId, questionSetIndex);\n//   }\n//\n//   openNotification = (i) => {\n//     const bestScore = Math.max(...this.state.user.scores[i]);\n//     const key = `open${Date.now()}`;\n//     const btn = (\n//       <Button type='primary' size='small' onClick={() => notification.close(key)}>\n//         Confirm\n//       </Button>\n//     );\n//     const msg = 'Chapter ' + (i + 1).toString() + bestScore >= 70 ? ' Passed!' : ' Failed!';\n//     notification.open({\n//       message: msg,\n//       description:\n//         bestScore >= 70 ?\n//           'You conquered this chapter, keep going to the next one.' :\n//           'You have failed all the tests of this chapter, please contact system manager for help.',\n//       btn,\n//       key,\n//       duration: 0,\n//     });\n//   };\n//\n//   onBack = (i, bm) => {\n//     const {user} = this.state;\n//     const updatedUser = user;\n//     updatedUser.bookmarks[i] = bm;\n//     this.setState({currentPage: 'chapterListPage', user: updatedUser})\n//   };\n//\n//   onQuit = () => {\n//     console.log(this.state.user.scores, this.state.showScore);\n//     this.setState({currentPage: 'chapterListPage'});\n//   }\n//\n//   onScoreSubmit = (c, t, s) => {\n//     const {user, showScore} = this.state;\n//     const newScores = user.scores.map(arr => arr.slice());\n//     newScores[c][t] = s;\n//     this.setState({user: {...user, scores: newScores}});\n//     console.log(user.scores, c, t, s, showScore)\n//   }\n//\n//   renderChild() {\n//     const { user, currentPage, chapterId, chapters, currentTest } = this.state;\n//\n//     switch (currentPage) {\n//       case 'loginPage': {\n//         return (\n//           <WrappedLogin />\n//         );\n//       }\n//\n//       case 'managerPage': {\n//         return (\n//           <ManagerPage />\n//         );\n//       }\n//\n//       case 'chapterListPage': {\n//         return (\n//           <ChapterList\n//             chapters={chapters}\n//             userScores={user.scores}\n//             progresses={user.bookmarks}\n//             onSelectTest={this.onSelectTest}\n//             onSelectChapter={this.onSelectChapter}\n//           />\n//         );\n//       }\n//\n//       case 'chapterContentPage': {\n//         console.log(this.state.user.scores)\n//         return (\n//           <ChapterContent\n//             chapterId={chapterId}\n//             chapterTitle={chapters[chapterId].title}\n//             bookmark={user.bookmarks[chapterId]}\n//             content={chapters[chapterId].content}\n//             onBack={this.onBack}\n//           />\n//         );\n//       }\n//\n//       case 'testPage': {\n//         const questionSet = chapters[chapterId].questionSets[currentTest];\n//         return (\n//           <QuestionSet\n//             chapterId={chapterId}\n//             questionSetIndex={currentTest}\n//             questions={questionSet}\n//             onScoreSubmit={this.onScoreSubmit}\n//             onQuit={this.onQuit}/>\n//         );\n//       }\n//\n//       default: {\n//         return null;\n//       }\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <HomeLayout user={this.state.user} onClickOfMenu={this.onClickOfMenu} onClickOfHome={this.onClickOfHome}>\n//         {this.renderChild()}\n//       </HomeLayout>\n//     );\n//   }\n// }\n//\n// export default App;\nimport React, { Component } from 'react';\nimport Form from './components/Form';\nimport DisplayUsers from './components/DisplayUsers';\nimport axios from 'axios';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      users: []\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchUsers();\n    };\n\n    _this.fetchUsers = function () {\n      axios.get('/users').then(function (response) {\n        var users = response.data.users;\n\n        _this.setState({\n          users: [].concat(_toConsumableArray(_this.state.users), _toConsumableArray(users))\n        });\n      }).catch(function () {\n        return alert('Error fetching new users');\n      });\n    };\n\n    _this.addUser = function (_ref) {\n      var name = _ref.name,\n          position = _ref.position,\n          company = _ref.company;\n\n      _this.setState({\n        users: [].concat(_toConsumableArray(_this.state.users), [{\n          name: name,\n          position: position,\n          company: company\n        }])\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Form, {\n        addUser: this.addUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(DisplayUsers, {\n        users: this.state.users,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/cai/Work_project/staff-training-system/client/src/App.js"],"names":["React","Component","Form","DisplayUsers","axios","App","state","users","componentDidMount","fetchUsers","get","then","response","data","setState","catch","alert","addUser","name","position","company"],"mappingsgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;IACMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;UAIRC,iB,GAAoB,YAAM;AACxB,YAAKC,UAAL;AACD,K;;UAEDA,U,GAAa,YAAM;AACjBL,MAAAA,KAAK,CAACM,GAAN,CAAU,QAAV,EACGC,IADH,CACQ,UAACC,QAAD,EAAc;AAAA,YACVL,KADU,GACAK,QAAQ,CAACC,IADT,CACVN,KADU;;AAElB,cAAKO,QAAL,CAAc;AAAEP,UAAAA,KAAK,+BAAM,MAAKD,KAAL,CAAWC,KAAjB,sBAA2BA,KAA3B;AAAP,SAAd;AACD,OAJH,EAKGQ,KALH,CAKS;AAAA,eAAMC,KAAK,CAAC,0BAAD,CAAX;AAAA,OALT;AAMD,K;;UAGDC,O,GAAU,gBAAiC;AAAA,UAA9BC,IAA8B,QAA9BA,IAA8B;AAAA,UAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,OAAc,QAAdA,OAAc;;AACzC,YAAKN,QAAL,CAAc;AACZP,QAAAA,KAAK,+BAAM,MAAKD,KAAL,CAAWC,KAAjB,IAAwB;AAAEW,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,QAAQ,EAARA,QAAR;AAAkBC,UAAAA,OAAO,EAAPA;AAAlB,SAAxB;AADO,OAAd;AAGD,K;;;;;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,KAAKH,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAE,YAAF;AAAe,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAOD;;;;EAjCeN,S;;AAoClB,eAAeI,GAAf","sourcesContent":["// import React from 'react';\n// import './App.css';\n// import HomeLayout from './HomeLayout'; //'.js' can be omitted.\n// import QuestionSet from './QuestionSet';\n// import ChapterContent from './ChapterContent';\n// import ChapterList from './ChapterList';\n// import ManagerPage from './ManagerPage';\n// import { Button, notification, Form } from 'antd';\n// import Login from './Login';\n//\n// const WrappedLogin = Form.create({ name: 'normal_login' })(Login);\n//\n//\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       // chapterListPage, chapterContentPage, testPage, loginPage, managerPage\n//       currentPage: 'loginPage',\n//       showScore: false,\n//       chapterId: 0,\n//       currentTest: null,\n//       user: {\n//         admin: true,\n//         username: 'abc',\n//         password: '1234',\n//         scores: [[null, null], [null, null]],\n//         bookmarks: [2, 0] // 1 means page #1\n//       },\n//       chapters: [\n//         {\n//           id: 0,\n//           title: 'c1',\n//           content: ['1111-1','1111-2'],\n//           questionSets:[\n//             [{ // [ [{},{},{}] , [{},{},{}]] ,\n//               statement: 'ch1-qs1-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }, {\n//               statement: 'ch1-qs1-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }, {\n//               statement: 'ch1-qs1-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }],\n//             [{\n//               statement: 'ch1-qs2-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs2-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'B',\n//             }, {\n//               statement: 'ch1-qs2-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }]]},\n//         {\n//           id: 1,\n//           title: 'c2',\n//           content: ['2222-1','2222-2'],\n//           questionSets:[\n//             [{ // [ [{},{},{}] , [{},{},{}]] ,\n//               statement: 'ch1-qs1-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }, {\n//               statement: 'ch1-qs1-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs1-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'B',\n//             }],\n//             [{\n//               statement: 'ch1-qs2-1',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'A',\n//             }, {\n//               statement: 'ch1-qs2-2',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'D',\n//             }, {\n//               statement: 'ch1-qs2-3',\n//               options: ['aa', 'bb', 'cc', 'dd'],\n//               correctAnswer: 'C',\n//             }]]}\n//       ],\n//     }\n//   }\n//\n//\n//   onClickOfMenu = (e) => this.setState({currentPage: e.key});\n//   // chapterListPage, chapterContentPage, testPage, loginPage, managerPage...\n//\n//   onClickOfHome = () => this.setState({currentPage: 'chapterListPage'})\n//\n//   onSelectChapter = (i, e) => { // logic of using bind()!\n//     this.setState({currentPage: e.target.value, chapterId: i}); // just to demo the usage of e and bind().\n//     console.log(this.state.currentPage, this.state.chapterId);\n//   }\n//\n//   onSelectTest = (i) => { // logic of using bind()!\n//     const questionSetIndex = this.state.user.scores[i].findIndex((s,i,l) => l[i]===null);\n//     // if tried all the tests, reset the scores:\n//     if (questionSetIndex === -1) {\n//       this.openNotification(i);\n//     }\n//     else {\n//       this.setState({currentPage: 'testPage', chapterId: i, currentTest: questionSetIndex});\n//     }\n//     console.log(this.state.currentPage, this.state.chapterId, questionSetIndex);\n//   }\n//\n//   openNotification = (i) => {\n//     const bestScore = Math.max(...this.state.user.scores[i]);\n//     const key = `open${Date.now()}`;\n//     const btn = (\n//       <Button type='primary' size='small' onClick={() => notification.close(key)}>\n//         Confirm\n//       </Button>\n//     );\n//     const msg = 'Chapter ' + (i + 1).toString() + bestScore >= 70 ? ' Passed!' : ' Failed!';\n//     notification.open({\n//       message: msg,\n//       description:\n//         bestScore >= 70 ?\n//           'You conquered this chapter, keep going to the next one.' :\n//           'You have failed all the tests of this chapter, please contact system manager for help.',\n//       btn,\n//       key,\n//       duration: 0,\n//     });\n//   };\n//\n//   onBack = (i, bm) => {\n//     const {user} = this.state;\n//     const updatedUser = user;\n//     updatedUser.bookmarks[i] = bm;\n//     this.setState({currentPage: 'chapterListPage', user: updatedUser})\n//   };\n//\n//   onQuit = () => {\n//     console.log(this.state.user.scores, this.state.showScore);\n//     this.setState({currentPage: 'chapterListPage'});\n//   }\n//\n//   onScoreSubmit = (c, t, s) => {\n//     const {user, showScore} = this.state;\n//     const newScores = user.scores.map(arr => arr.slice());\n//     newScores[c][t] = s;\n//     this.setState({user: {...user, scores: newScores}});\n//     console.log(user.scores, c, t, s, showScore)\n//   }\n//\n//   renderChild() {\n//     const { user, currentPage, chapterId, chapters, currentTest } = this.state;\n//\n//     switch (currentPage) {\n//       case 'loginPage': {\n//         return (\n//           <WrappedLogin />\n//         );\n//       }\n//\n//       case 'managerPage': {\n//         return (\n//           <ManagerPage />\n//         );\n//       }\n//\n//       case 'chapterListPage': {\n//         return (\n//           <ChapterList\n//             chapters={chapters}\n//             userScores={user.scores}\n//             progresses={user.bookmarks}\n//             onSelectTest={this.onSelectTest}\n//             onSelectChapter={this.onSelectChapter}\n//           />\n//         );\n//       }\n//\n//       case 'chapterContentPage': {\n//         console.log(this.state.user.scores)\n//         return (\n//           <ChapterContent\n//             chapterId={chapterId}\n//             chapterTitle={chapters[chapterId].title}\n//             bookmark={user.bookmarks[chapterId]}\n//             content={chapters[chapterId].content}\n//             onBack={this.onBack}\n//           />\n//         );\n//       }\n//\n//       case 'testPage': {\n//         const questionSet = chapters[chapterId].questionSets[currentTest];\n//         return (\n//           <QuestionSet\n//             chapterId={chapterId}\n//             questionSetIndex={currentTest}\n//             questions={questionSet}\n//             onScoreSubmit={this.onScoreSubmit}\n//             onQuit={this.onQuit}/>\n//         );\n//       }\n//\n//       default: {\n//         return null;\n//       }\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <HomeLayout user={this.state.user} onClickOfMenu={this.onClickOfMenu} onClickOfHome={this.onClickOfHome}>\n//         {this.renderChild()}\n//       </HomeLayout>\n//     );\n//   }\n// }\n//\n// export default App;\nimport React, { Component } from 'react';\nimport Form from './components/Form';\nimport DisplayUsers from './components/DisplayUsers';\nimport axios from 'axios';\nimport './App.css';\nclass App extends Component {\n  state = {\n    users: []\n  }\n\n  componentDidMount = () => {\n    this.fetchUsers();\n  };\n\n  fetchUsers = () => {\n    axios.get('/users')\n      .then((response) => {\n        const { users } = response.data;\n        this.setState({ users: [...this.state.users, ...users] })\n      })\n      .catch(() => alert('Error fetching new users'));\n  };\n\n\n  addUser = ({ name, position, company }) => {\n    this.setState({\n      users: [...this.state.users, { name, position, company }]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form addUser={this.addUser}/>\n        < DisplayUsers users={this.state.users} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}